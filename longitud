				.data
ficheroEntrada: 	.asciiz "/Users/hmcshan/Desktop/tester.txt" 
ficheroSalida: 		.asciiz "c:\users\ficheroS.txt"
buffer:			.space 1
eError:			.asciiz "Error al abrir el fichero de entrada"
sError:			.asciiz "Error al crear el fichero de salida"
rError:			.asciiz "Error al leer en el fichero"
wError:			.asciiz "Error al escribir en el fichero"
error_vacio:		.asciiz "Fichero Vacio"
cadena1:		.asciiz "Longitud "
cadena2:		.asciiz "Longitud media: "
cadena3:		.asciiz ": "
saltoLinea:		.byte 0xa		# \n
punto:			.byte 0x2e
			.align 2
bufferNumero:		.space 4		#la maxima longitud de la palabra son 256 bytes, es decir el numero maximo puede tener 3 bytes de longitud
						#pero uso 4 para mantenerlo alineado y que sea mas facil limpiarlo. El ultimo byte estaria siempre vacio

				.text
			.globl main
					
main:				la $a0 ficheroEntrada	#abrimos el fichero
				li $a1 0x0
				li $v0 13
				syscall
				li $t0 -1
				
				beq $v0 $t0 eError		#Si ha fallado al abrir el archivo sacamos mensaje de error
				
				move $s0 $v0			#copiamos el descriptor del ficheroEntrada			$s0 descriptor del archivo

				addi $sp $sp -8 		#inicio la lista
				sw $0 ($sp)
				move $a0 $s0			#lee 1 caracter
				la $a1 buffer
				li $a2 1
				li $v0 14
				syscall
				
				beqz $v0 vacio			#si es el final, el fichero esta vacio
				b comprobar			#si no esta vacio, iniciamoes el bucle despues de leer un caracter
			
bucle:				move $a0 $s0			#lee 1 caracter
				la $a1 buffer
				li $a2 1
				li $v0 14
				syscall
				
				beqz $v0 eof			#si ha llegado al final del archivo cerramos el archivo y terminamos
				
				li $t0 -1			#Si da error al leer sacamos mensaje de error
				beq $v0 $t0 errorR
					
comprobar:			lb $t0 buffer			#comprobamos si es un espacio o un salto de linea	 	$t0 caracter en buffer
					
				li $t1 0xa
				beq $t1 $t0 bucle
				li $t1 0x20
				beq $t1 $t0 bucle

				move $a0 $t0			#si no lo es seguimos, pasamos el caracter leido como parametro
					
				addi $sp $sp -8			#guardamos en la pila el $ra y el $fp
				sw $ra 4($sp)
				sw $fp ($sp)
						
				jal longitud			#llamamos a la funcion
					
				lw $fp ($sp)			#recuperamos el $fp y el $ra
				lw $ra 4($sp)
				addi $sp $sp 8
				
				move $a0 $v1			#pasamos la longitud como parametro
			
				addi $sp $sp -8			#guardamos en la pila el $ra y el $fp
				sw $ra 4($sp)
				sw $fp ($sp)
				
				jal guardarEnLista
				
				lw $fp ($sp)			#recuperamos el $fp y el $ra
				lw $ra 4($sp)
				addi $sp $sp 8

				beqz $v0 noCrear		#si hay que crear cabezera la creo
				addi $sp $sp -8
				sw $v1 ($sp)
				
noCrear:			b bucle	
								
eof:				move $a0 $s0			#cerramos el archivo
				li $v0 16
				syscall
				
				la $a0 ficheroSalida		#Creamos el fichero de salida para solo escritura
				li $a1 0x301
				li $a2 0x1ff
				li $v0 13
				syscall
				
				
				li $t0 -1			#Comprobamos si ha dado error al crearlo
				beq $t0 $v0 errorS
				
				move $s0 $v0																	#s0 descriptor
				
				lw $s1($sp)																		#s1 longitud de lista
				move $s2 $s1																	#s2 longitud de lista auxiliar
				addi $sp $sp 8			#apuntamos al primer elemento
				li $s3 0																		#$s3 el total de caracteres
				li $s4 0																		#$s4 total de palabras

for:				beqz $s2 finFor			#iteramos sobre el numero de elementos que hay en la lista
				
				lw $s5 ($sp)																	#s5 indice
				lw $s6 4($sp)																	#s6 elementos
				add $s4 $s4 $s6
				mul $t3 $s5 $s6																	#t3 valor temporal
				add $s3 $s3 $t3			#sumamos a s3 el numero de elementos por la longitud del elemento
				
				move $a0 $s0			#escribimos longitud en el fichero 
				la $a1 cadena1
				li $a2 9
				li $v0 15
				syscall
				li $t3 -1																		#t3 -1
				beq $t3 $v0 errorW		#confirmamos que no hay error
				
				move $a0 $s5			#paso el valor del indice como parametro
				
				addi $sp $sp -8			#guardamos en la pila el $ra y el $fp
				sw $ra 4($sp)
				sw $fp ($sp)
						
				jal intToAscii			#llamamos a la funcion
					
				lw $fp ($sp)			#recuperamos el $fp y el $ra
				lw $ra 4($sp)
				addi $sp $sp 8
								
				move $a0 $s0			#ponemos el descriptor del fichero
				la $a1 bufferNumero		#escribimos el indice en ascii
				add $a1 $a1 $v0			#le ponemos el desplazamiento que nos indica la funcion
				move $a2 $v1			#le ponemos la longitud que indica la funcion
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error
			
				la $a1 cadena3			#escribimos ": " en el fichero
				li $a2 2
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error
	
				move $a0 $s6			#paso el valor del las apariciones como parametro
				
				addi $sp $sp -8			#guardamos en la pila el $ra y el $fp
				sw $ra 4($sp)
				sw $fp ($sp)
						
				jal intToAscii			#llamamos a la funcion
					
				lw $fp ($sp)			#recuperamos el $fp y el $ra
				lw $ra 4($sp)
				addi $sp $sp 8
								
				move $a0 $s0			#ponemos el descriptor del fichero
				la $a1 bufferNumero		#escribimos el indice en ascii
				add $a1 $a1 $v0			#le ponemos el desplazamiento que nos indica la funcion
				move $a2 $v1			#le ponemos la longitud que indica la funcion
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error

				
				addi $sp $sp 8			#eliminamos el ultimo elemento de la lista
				addi $s2 -1				#restamos uno a la longitud de la lista
				
				beq $t3 $v0 errorW		#confirmamos que no hay error
					
				la $a1 saltoLinea		#escribimos '\n' en el archivo
				li $a2 1
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error
				
				b for

finFor:				move $a0 $s0			#ponemos el descriptor del fichero
				la $a1 saltoLinea		#escribimos un '\n' adicional antes de la media en el archivo
				li $a2 1
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error
				
				bnez $s4 noDivCero		#si s4 es cero lo ponemos a 1 para evitar dividir entre 0
				li $s4 1
				
				
noDivCero:			la $a1 cadena2			#escribimos "Longitud Media: " en el archivo
				li $a2 16
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error

				mtc1 $s3 $f0			#movemos s3 a un registro en coma flotante				 $f0 total en float
				mtc1 $s4 $f1 			#movemos s4 a un registro en coma flotante				 $f1 longitud de lista en float
				div.s $f2 $f0 $f1 		#calculamos la media									 $f2 media en float
				
				li $t0 1000				#precision de 3 decimales								 $t0 valor temporal
				mtc1 $t0 $f3			#paso t0 a un registro en coma flotante					 $f3 valor temporal en binario puro
				cvt.s.w $f3 $f3			#lo paso a formato de IEEE								 $f3 valor temporal en IEEE

				cvt.w.s $f0 $f2			#hacemos un cast a entero								 $f0 parte entera de la media en binario puro
				cvt.s.w $f1 $f0			#lo vuelvo a pasar a formato de IEEE en 				 $f1 parte entera de la media en IEEE
				
				sub.s $f1 $f2 $f1		#restamos la parte entera 								 $f1 parte decimal de la media en IEEE
	
				mul.s $f4 $f1 $f3		#pasamos a la parte entera 3 decimales					 $f4 valor parte decimal como entero en binario puro
				
				cvt.w.s $f1 $f4
				
				mfc1 $a0 $f0			#pasamos la parte entera como parametro
				
				addi $sp $sp -8			#guardamos en la pila el $ra y el $fp
				sw $ra 4($sp)
				sw $fp ($sp)
						
				jal intToAscii			#llamamos a la funcion
					
				lw $fp ($sp)			#recuperamos el $fp y el $ra
				lw $ra 4($sp)
				addi $sp $sp 8
								
				move $a0 $s0			#ponemos el descriptor del fichero
				la $a1 bufferNumero		#escribimos el indice en ascii
				add $a1 $a1 $v0			#le ponemos el desplazamiento que nos indica la funcion
				move $a2 $v1			#le ponemos la longitud que indica la funcion
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error
				
				la $a1 punto			#escribimos un '.' antes de la parte decimal en el archivo
				li $a2 1
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error
				
				mfc1 $a0 $f1			#pasamos la parte decimal como parametro
				
				addi $sp $sp -8			#guardamos en la pila el $ra y el $fp
				sw $ra 4($sp)
				sw $fp ($sp)
						
				jal intToAscii			#llamamos a la funcion
					
				lw $fp ($sp)			#recuperamos el $fp y el $ra
				lw $ra 4($sp)
				addi $sp $sp 8
								
				move $a0 $s0			#ponemos el descriptor del fichero
				la $a1 bufferNumero		#escribimos el indice en ascii
				add $a1 $a1 $v0			#le ponemos el desplazamiento que nos indica la funcion
				move $a2 $v1			#le ponemos la longitud que indica la funcion
				li $v0 15
				syscall
				beq $t3 $v0 errorW		#confirmamos que no hay error

				li $v0 16				#Cerramos el fichero
				syscall		
				b finPrograma
				
				b finPrograma				

errorE:				la $a0 	eError			#sacamos por pantalla el mensaje de error
				li $v0 4
				syscall
				b finPrograma
				
errorR:				la $a0 	rError			#sacamos por pantalla el mensaje de error
				li $v0 4
				syscall
				b finPrograma

errorS:				la $a0 	sError			#sacamos por pantalla el mensaje de error
				li $v0 4
				syscall
				b finPrograma

errorW:				la $a0 	wError			#sacamos por pantalla el mensaje de error
				li $v0 4
				syscall
				b finPrograma
				
vacio:				li $v0 4
				la $a0 error_vacio
				syscall 
				b finPrograma				

finPrograma:	        
				li $v0 10
				syscall
				
longitud:			li $v1 1			#iniciamos variables	v1 contador de longitud de la palabra
				
bucleChar:			move $a0 $s0			#leemos un caracter
				la $a1 buffer
				li $a2 1
				li $v0 14
				syscall
				
				beqz $v0 finLong		#si ha llegado al final del archivo terminamos la funcion
				lb $t1 buffer			#guardamos el caracter leido		#$t1 caracter leido del archivo
				
				li $t3 0xa			#si el ultimo caracter leido es un espacio o un enter salimos de bucle
				beq $t1 $t3 finLong
				li $t3 0x20
				beq $t1 $t3 finLong
							
				addi $v1 $v1 1			#incrementamos contador de longitud de palabra
				b bucleChar

finLong:			jr $ra

guardarEnLista: 		addi $t0 $sp 8			#apunto a la cavecera de la lista						t0 puntero auxiliar
				
				lw $t1 ($t0)			#guardo la longitud de la lista							t1 longitud de la lista
				move $t2 $t1			#														t2 contador
				
comprobarLista:			beqz $t2 crear			#si t0 es 0 quiere decir que el indice no existe asi que lo creo
					
				addi $t0 $t0 8			#salto al siguiente indice
				lw $t3 ($t0)			#guardo el valor del indice								t3 valor del indice actual
				beq $a0 $t3 igual		#si es igual quiere decir que ya existe asi que le anado uno al contador del indice
				addi $t2 $t2 -1			#cambio en 1 el contador
				b comprobarLista

igual:				addi $t0 $t0 4			#voy al contador del indice

				lw $t4 ($t0)			#anado uno al contador del indice
				addi $t4 $t4 1			
				sw $t4 ($t0)
				
				li $v0 0			#guardo 0 en v0 porque no hay que cambiar la cabecera
				b finLista

crear:				addi $t0 $sp 8			#si ha llegado hasta aqui no existe esa etiqueta
				sw $a0 ($t0)			#reinicio a la cima de la lista y pongo el indice y 1 a su contador
				addi $t0 $t0 4	
				li $t4 1
				sw $t4 ($t0)
			
				li $v0 1			#guardo 1 en v0 porque hay que crear la cabecera
				addi $v1 $t1 1			#guardo en v1 la longitud nueva del array
			
finLista:			jr $ra	

intToAscii:							#guarda en bufferNumero el equivalente a ascii de a0 y devuelve en v0 la longitud por la que empezar a leerlo
				sw $0 bufferNumero		#pongo el buffer a 0
				li $t0 10			#t0 10
				li $v0 3			#contador de digito, empiezamos con el maximo porque va de derecha a izquierda
				
leerDigito:			addi $v0 -1			#resto uno al contador (el primero se almacenaria en la tercera posicion)
				rem $t1 $a0 $t0			#t1 = a0%10		t1 caracter
				div $a0 $a0 $t0			#a0 = a0/10
				addi $t1 48			#paso el caracter a ascii
				sb $t1 bufferNumero($v0) 	#guardo el caracter en el buffer
				bnez $a0 leerDigito		#si $a0 no es 0 quedan mas caracteres
				
				li $t0 3
				sub $v1 $t0 $v0			#guardo en v1 los bytes que ocupa
				
				jr $ra				#termino la funcion
